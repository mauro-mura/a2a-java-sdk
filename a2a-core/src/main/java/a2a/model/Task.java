package a2a.model;

import lombok.Data;
import lombok.ToString;

import java.util.Map;

/**
 * Represents the stateful unit of work being processed by the A2A Server for an A2A Client.
 * A task encapsulates the entire interaction related to a specific goal or request.
 */
@Data
@ToString
public class Task {
    /**
     * A unique identifier for the task. This ID is typically generated by the client
     * when initiating the task and MUST be used by the server to refer to this task.
     * It should be sufficiently unique (e.g., a UUID v4).
     */
    private final String id;
    /**
     * An optional, client-generated identifier used to group related tasks into a logical session.
     * Useful for maintaining context across multiple, sequential, or related tasks.
     */
    private String sessionId;
    /**
     * The current status of the task, including its lifecycle state, an optional associated message,
     * and a timestamp.
     */
    private final TaskStatus status;
    /**
     * An array of outputs (artifacts) generated by the agent for this task.
     * This array can be populated incrementally, especially during streaming.
     * Artifacts represent the tangible results of the task.
     */
    private Artifact[] artifacts;
    /**
     * An optional array of recent messages exchanged within this task,
     * ordered chronologically (oldest first).
     * This history is included if requested by the client via the `historyLength` parameter
     * in `TaskSendParams` or `TaskQueryParams`.
     */
    private Message[] history;
    /**
     * Arbitrary key-value metadata associated with the task.
     * Keys SHOULD be strings; values can be any valid JSON type (string, number, boolean, array, object).
     * This can be used for application-specific data, tracing info, etc.
     */
    private Map<String, Object> metadata;

//    public Task(String id, TaskStatus status) {
//        this.id = Objects.requireNonNull(id);
//        this.status = Objects.requireNonNull(status);
//    }
}
